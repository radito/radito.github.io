[{"content":" Bolt BL-100 Memiliki modem lte qualcomm yang dipasang menggunakan socket pci-e. Socket pci-e ini memiliki daya 3.3v yang terhubung secara langsung ke pin gpio 28. Daya yang didapatkan diberikan oleh pin keluaran chip mt7620 sebagai prosesornya.\n#!/bin/sh gpio_path=\u0026#34;/sys/class/gpio/gpio28/value\u0026#34; if [ ! -e \u0026#34;$gpio_path\u0026#34; ]; then echo \u0026#34;Booting Modem...\u0026#34; | tee \u0026gt;(logger) sleep 1 echo 28 \u0026gt; /sys/class/gpio/export echo out \u0026gt; /sys/class/gpio/gpio28/direction echo 1 \u0026gt; /sys/class/gpio/gpio28/value sleep 1 echo \u0026#34;Writing Driver VID \u0026amp; PID\u0026#34; | tee \u0026gt;(logger) echo \u0026#34;05c6 9026\u0026#34; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id echo \u0026#34;Booting completed !\u0026#34; | tee \u0026gt;(logger) exit fi gpio_val=$(cat $gpio_path) echo GPIO value: $gpio_val | tee \u0026gt;(logger) echo \u0026#34;Restarting Modem...\u0026#34; | tee \u0026gt;(logger) echo 0 \u0026gt; /sys/class/gpio/gpio28/value echo \u0026#34;Sleeping 5s...\u0026#34; | tee \u0026gt;(logger) sleep 5 echo \u0026#34;Turning On Modem\u0026#34; | tee \u0026gt;(logger) echo 1 \u0026gt; /sys/class/gpio/gpio28/value sleep 1 echo \u0026#34;Writing Driver VID \u0026amp; PID\u0026#34; | tee \u0026gt;(logger) echo \u0026#34;05c6 9026\u0026#34; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id echo \u0026#34;Finished.\u0026#34; | tee \u0026gt;(logger) Simpan script diatas di folder /root/bootmodem.sh\nMasukkan script pada saat startup di halaman luci.\nInstall package luci-app-commands\nopkg update opkg install luci-app-commands Konfigurasi script di dalam app-command agar script bisa diakses dari menu web\nKonfigurasi selesai, jika ingin melakukan restart modem pergi ke menu System → Custom Commands lalu pilih script Restart Modem dan klik RUN.\nTunggu sekitar 5 detik untuk modem selesai melakukan restart dan sekitar 5 detik lagi agar interface wwan0 memperbaharui koneksi ke modem lte.\n","permalink":"https://radito.github.io/posts/6b0dfa39-35a9-4af5-b2e9-ded176981f46/","summary":"Bolt BL-100 Memiliki modem lte qualcomm yang dipasang menggunakan socket pci-e. Socket pci-e ini memiliki daya 3.3v yang terhubung secara langsung ke pin gpio 28. Daya yang didapatkan diberikan oleh pin keluaran chip mt7620 sebagai prosesornya.\n#!/bin/sh gpio_path=\u0026#34;/sys/class/gpio/gpio28/value\u0026#34; if [ ! -e \u0026#34;$gpio_path\u0026#34; ]; then echo \u0026#34;Booting Modem...\u0026#34; | tee \u0026gt;(logger) sleep 1 echo 28 \u0026gt; /sys/class/gpio/export echo out \u0026gt; /sys/class/gpio/gpio28/direction echo 1 \u0026gt; /sys/class/gpio/gpio28/value sleep 1 echo \u0026#34;Writing Driver VID \u0026amp; PID\u0026#34; | tee \u0026gt;(logger) echo \u0026#34;05c6 9026\u0026#34; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id echo \u0026#34;Booting completed !","title":"🔄 Restart Modem BL-100 (OpenWRT)"},{"content":" Gambar diatas merupakan modem yang ada pada Router Bolt BL-100. Modem tersebut menggunakan interface m2 seperti PCI-e, tetapi pada implementasinya aslinya menggunakan protokol USB sebagai sistem komunikasi data antara cpu dan modem. Modem ini mensupport band B40 dengan frekuensi 2300.\nSetelah beberapa kali debugging dan percobaan, serta membaca referensi dari anggota grup Facebook LT4220 ternyata ada beberapa cara yang harus di kerjakan agar modem ini dapat bekerja yaitu diperlukan driver dan perintah untuk mengaktifkan pin GPIO keluaran chipset mt7620 dimana pin GPIO 28 digunakan untuk mengaktifkan suplai daya ke pin pci yang digunakan.\nJika pin 28 tidak diberi tegangan HIGH maka modem tidak akan menyala, hal ini lah yang membuat awalnya agak kebingungan karena semua driver USB dari hasil debugging sudah diinstall tetapi ketika dilihat di log kernel dan sistem tidak ada satupun device yang terdeteksi. Terimakasih kepada anggota grup LT4220 atas referensinya sehingga modem ini bisa dijalankan.\nTutorial 💡 OpenWRT yang digunakan pada tutorial adalah 23.05.2 dibawah versi ini ada bisa terjadi package yang tidak compatible. Jika bisa gunakan versi OpenWRT yang sama.\nBuka console openwrt melalui ssh menggunakan command berikut, sesuaikan dengan IP openwrt yang digunakan device → ssh root@192.168.1.1\nroot@192.168.1.1\u0026#39;s password: BusyBox v1.36.1 (2023-11-14 13:38:11 UTC) built-in shell (ash) _______ ________ __ | |.-----.-----.-----.| | | |.----.| |_ | - || _ | -__| || | | || _|| _| |_______|| __|_____|__|__||________||__| |____| |__| W I R E L E S S F R E E D O M ----------------------------------------------------- OpenWrt 23.05.2, r23630-842932a63d ----------------------------------------------------- root@PULPSTONE:~# Update list package opkg → opkg update\nroot@PULPSTONE:~# opkg update Downloading http://pulpstone.pw/repo/chaoscalmer/ramips/mt7620/kernel45/packages/Packages.gz Updated list of available packages in /var/opkg-lists/pulpstone_packages Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_core Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_base Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/luci/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_luci Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_packages Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/routing/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_routing Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/telephony/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_telephony Install driver core USB driver harusnya sudah include di build openwrt, tetapi untuk memastikan tidak ada yang kelewat → opkg install kmod-usb-core kmod-usb-uhci kmod-usb-ohci kmod-usb2\nroot@PULPSTONE:~# opkg install kmod-usb-core kmod-usb-uhci kmod-usb-ohci kmod-usb2 Package kmod-usb-core (5.15.137-1) installed in root is up to date. Installing kmod-usb-uhci (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-uhci_5.15.137-1_mipsel_24kc.ipk Package kmod-usb-ohci (5.15.137-1) installed in root is up to date. Package kmod-usb2 (5.15.137-1) installed in root is up to date. Configuring kmod-usb-uhci. Install driver usb untuk keperluan modem serial dan modem networking → opkg install kmod-usb-net kmod-usb-net-qmi-wwan kmod-usb-wdm kmod-usb-acm kmod-mii kmod-usb-serial-option kmod-usb-serial kmod-usb-serial-wwan\nroot@PULPSTONE:~# opkg install kmod-usb-net kmod-usb-net-qmi-wwan kmod-usb-wdm kmod-usb-acm kmod-mii kmod-usb-serial-option kmod-usb-s erial kmod-usb-serial-wwan Installing kmod-usb-net (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-net_5.15.137-1_mipsel_24kc.ipk Installing kmod-mii (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-mii_5.15.137-1_mipsel_24kc.ipk Installing kmod-usb-net-qmi-wwan (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-net-qmi-wwan_5.15.137-1_mipsel_24kc.ipk Installing kmod-usb-wdm (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-wdm_5.15.137-1_mipsel_24kc.ipk Package kmod-usb-wdm (5.15.137-1) installed in root is up to date. Installing kmod-usb-acm (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-acm_5.15.137-1_mipsel_24kc.ipk Package kmod-mii (5.15.137-1) installed in root is up to date. Installing kmod-usb-serial-option (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-serial-option_5.15.137-1_mipsel_24kc.ipk Installing kmod-usb-serial (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-serial_5.15.137-1_mipsel_24kc.ipk Installing kmod-usb-serial-wwan (5.15.137-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/kmod-usb-serial-wwan_5.15.137-1_mipsel_24kc.ipk Package kmod-usb-serial (5.15.137-1) installed in root is up to date. Package kmod-usb-serial-wwan (5.15.137-1) installed in root is up to date. Configuring kmod-mii. Configuring kmod-usb-net. Configuring kmod-usb-wdm. Configuring kmod-usb-net-qmi-wwan. Configuring kmod-usb-serial. Configuring kmod-usb-serial-wwan. Configuring kmod-usb-serial-option. Configuring kmod-usb-acm. Install utilitas OpenWRT untuk melihat list usb dan kontrol AT command modem → opkg install usbutils qmi-utils adb-enablemodem uqmi minicom picocom comgt\nroot@PULPSTONE:~# opkg install usbutils qmi-utils adb-enablemodem uqmi minicom picocom comgt Installing usbutils (014-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/usbutils_014-1_mipsel_24kc.ipk Installing librt (1.2.4-4) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/librt_1.2.4-4_mipsel_24kc.ipk Installing libatomic1 (12.3.0-4) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/libatomic1_12.3.0-4_mipsel_24kc.ipk Installing libusb-1.0-0 (1.0.26-3) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/libusb-1.0-0_1.0.26-3_mipsel_24kc.ipk Installing libevdev (1.13.0-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libevdev_1.13.0-1_mipsel_24kc.ipk Installing libudev-zero (1.0.1-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libudev-zero_1.0.1-1_mipsel_24kc.ipk Installing qmi-utils (1.32.4-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/qmi-utils_1.32.4-1_mipsel_24kc.ipk Installing zlib (1.2.13-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/zlib_1.2.13-1_mipsel_24kc.ipk Installing libffi (3.4.2-2) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libffi_3.4.2-2_mipsel_24kc.ipk Installing libattr (2.5.1-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libattr_2.5.1-1_mipsel_24kc.ipk Installing libpcre2 (10.42-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/libpcre2_10.42-1_mipsel_24kc.ipk Installing glib2 (2.74.0-5) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/glib2_2.74.0-5_mipsel_24kc.ipk Installing libmbim (1.28.4-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libmbim_1.28.4-1_mipsel_24kc.ipk Installing libqrtr-glib (1.2.2-3) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libqrtr-glib_1.2.2-3_mipsel_24kc.ipk Installing libqmi (1.32.4-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libqmi_1.32.4-1_mipsel_24kc.ipk Installing adb-enablemodem (2017-03-05-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/adb-enablemodem_2017-03-05-1_mipsel_24kc.ipk Installing libopenssl3 (3.0.12-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/libopenssl3_3.0.12-1_mipsel_24kc.ipk Installing adb (android.5.0.2_r1-3) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/adb_android.5.0.2_r1-3_mipsel_24kc.ipk Installing uqmi (2022-10-20-c8c9f105-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/uqmi_2022-10-20-c8c9f105-1_mipsel_24kc.ipk Installing wwan (2019-04-29-6) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/wwan_2019-04-29-6_mipsel_24kc.ipk Installing minicom (2.8-2) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/minicom_2.8-2_mipsel_24kc.ipk Installing terminfo (6.4-2) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/terminfo_6.4-2_mipsel_24kc.ipk Installing libncurses6 (6.4-2) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/libncurses6_6.4-2_mipsel_24kc.ipk Installing picocom (3.1-5) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/picocom_3.1-5_mipsel_24kc.ipk Installing comgt (0.32-35) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/targets/ramips/mt7620/packages/comgt_0.32-35_mipsel_24kc.ipk Installing chat (2.4.9.git-2021-01-04-4) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/base/chat_2.4.9.git-2021-01-04-4_mipsel_24kc.ipk Configuring terminfo. Configuring libatomic1. Configuring libopenssl3. Configuring libevdev. Configuring chat. Configuring zlib. Configuring libffi. Configuring libattr. Configuring libpcre2. Configuring glib2. Configuring libncurses6. Configuring minicom. Configuring librt. Configuring libusb-1.0-0. Configuring adb. Configuring libudev-zero. Configuring usbutils. Configuring comgt. Configuring libmbim. Configuring libqrtr-glib. Configuring libqmi. Configuring wwan. Configuring uqmi. Configuring qmi-utils. Configuring picocom. Configuring adb-enablemodem. * daemon not running. starting it now on port 5037 * * daemon started successfully * Install Modem Manager untuk mengelola modem dan install modul interface web lucinya → opkg install modemmanager luci-proto-modemmanager luci-proto-qmi\nroot@PULPSTONE:~# opkg install modemmanager luci-proto-modemmanager luci-proto-qmi Installing modemmanager (1.20.6-12) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/modemmanager_1.20.6-12_mipsel_24kc.ipk Installing libexpat (2.5.0-1) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libexpat_2.5.0-1_mipsel_24kc.ipk Installing libdbus (1.13.18-12) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/libdbus_1.13.18-12_mipsel_24kc.ipk Installing dbus (1.13.18-12) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/packages/dbus_1.13.18-12_mipsel_24kc.ipk Installing luci-proto-modemmanager (git-23.338.81439-5f6fc19) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/luci/luci-proto-modemmanager_git-23.338.81439-5f6fc19_all.ipk Installing luci-proto-qmi (git-21.231.25157-5ff3ef7) to root... Downloading https://downloads.openwrt.org/releases/23.05.2/packages/mipsel_24kc/luci/luci-proto-qmi_git-21.231.25157-5ff3ef7_all.ipk Configuring libdbus. Configuring libexpat. Configuring dbus. Configuring modemmanager. Configuring luci-proto-modemmanager. Configuring luci-proto-qmi. Dari postingan Debugging USB diketahui VID dan PID modem lte adalah 05c6 9026 kita akan memasukkan VID dan PID ini ke dalam driver qmi → echo \u0026quot;05c6 9026\u0026quot; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id\nroot@PULPSTONE:~# echo \u0026#34;05c6 9026\u0026#34; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id root@PULPSTONE:~# Buat Script Bash untuk mengaktifkan pin GPIO 28 Pin gpio 28 ini digunakan untuk menyuplai tegangan 3.3 v dari output mt7620 dan berfungsi untuk mengaktifkan modul LTE nya. Jika pin ini tidak di trigger HIGH maka modem LTE tidak akan hidup dan tidak akan terdeteksi. echo \\ \u0026#39; #!/bin/sh echo \u0026#39;Booting Modem\u0026#39; echo \u0026#34;05c6 9026\u0026#34; \u0026gt; /sys/bus/usb/drivers/qmi_wwan/new_id echo 28 \u0026gt; /sys/class/gpio/export echo out \u0026gt; /sys/class/gpio/gpio28/direction echo 0 \u0026gt; /sys/class/gpio/gpio28/value echo \u0026#34;Sleeping 3s...\u0026#34; sleep 3 echo \u0026#34;Turning On Modem\u0026#34; echo 1 \u0026gt; /sys/class/gpio/gpio28/value\u0026#39; \u0026gt; /root/bootmodem.sh chmod +x /root/bootmodem.sh Cek list usb yang terkoneksi sekarang dengan command lsusb. Modem seharusnya belum terdeteksi karena pin GPIO belum diaktifkan. → lsusb \u0026amp;\u0026amp; lsusb -t\nroot@PULPSTONE:~# lsusb \u0026amp;\u0026amp; lsusb -t Bus 002 Device 001: ID 1d6b:0001 Linux 5.15.137 ohci_hcd Generic Platform OHCI controller Bus 001 Device 001: ID 1d6b:0002 Linux 5.15.137 ehci_hcd EHCI Host Controller /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ohci-platform/1p, 12M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=ehci-platform/1p, 480M Aktifkan modem dengan script bootmodem.sh → sh /root/bootmodem.sh\nroot@PULPSTONE:~# sh /root/bootmodem.sh Booting Modem Sleeping 3s... Turning On Modem Cek list usb yang terkoneksi dengan command dibawah → lsusb \u0026amp;\u0026amp; lsusb -t\nroot@PULPSTONE:~# lsusb \u0026amp;\u0026amp; lsusb -t Bus 002 Device 001: ID 1d6b:0001 Linux 5.15.137 ohci_hcd Generic Platform OHCI controller Bus 001 Device 003: ID 05c6:9026 Android Android Bus 001 Device 001: ID 1d6b:0002 Linux 5.15.137 ehci_hcd EHCI Host Controller /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ohci-platform/1p, 12M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=ehci-platform/1p, 480M |__ Port 1: Dev 3, If 0, Class=, Driver=, 480M |__ Port 1: Dev 3, If 1, Class=, Driver=usbfs, 480M |__ Port 1: Dev 3, If 2, Class=, Driver=cdc_acm, 480M |__ Port 1: Dev 3, If 3, Class=, Driver=cdc_acm, 480M |__ Port 1: Dev 3, If 4, Class=, Driver=cdc_acm, 480M |__ Port 1: Dev 3, If 5, Class=, Driver=cdc_acm, 480M |__ Port 1: Dev 3, If 6, Class=, Driver=qmi_wwan, 480M Modem seharusnya sudah terdeteksi dengan VID dan PID 05c6:9026 Serta terdapat Beberapa port dibawahnya dengan driver usbfs,cdc_acm, dan qmi_wwan. Pastikan juga modem sudah berada di kecepatan usb 480mbps agar dapat berfungsi.\nCek modem menggunakan Modem Manager CLI → mmcli -L\nroot@PULPSTONE:~# mmcli -L /org/freedesktop/ModemManager1/Modem/1 [QUALCOMM INCORPORATED] 0 Disini modem mendapatkan ID: 1 maka untuk command selanjutnya masukkan angka 1.\nCek info modem menggunakan ID: 1 → mmcli -m 1\nroot@PULPSTONE:~# mmcli -m 1 ----------------------------- General | path: /org/freedesktop/ModemManager1/Modem/1 | device id: **************************************** ----------------------------- Hardware | manufacturer: QUALCOMM INCORPORATED | model: 0 | firmware revision: WWHC020.51.17.M12_01 1 [Dec 09 2015 22:00:00] | carrier config: default | h/w revision: 20002 | supported: lte | current: lte | equipment id: *************** ----------------------------- System | device: /sys/devices/platform/101c0000.ehci/usb1/1-1 | drivers: cdc_acm, qmi_wwan | plugin: generic | primary port: cdc-wdm0 | ports: cdc-wdm0 (qmi), ttyACM0 (at), ttyACM1 (at), wwan0 (net) ----------------------------- Status | state: failed | failed reason: sim-missing | power state: on ----------------------------- Modes | supported: allowed: 4g; preferred: none | current: allowed: 4g; preferred: none ----------------------------- Bands | supported: eutran-40 | current: eutran-40 ----------------------------- IP | supported: ipv4, ipv6, ipv4v6 Reboot Router agar interface luci berubah → reboot\nSetting Modem di Interface Web Untuk setting auto config modem setelah boot masuk ke menu System -\u0026gt; Startup -\u0026gt; Local Startup Tambahkan kode sh /root/bootmodem.sh sebelum exit, lalu klik Save Reboot router telebih dahulu di menu System -\u0026gt; Reboot Lalu Perform Reboot Jika sudah menyala bisa cek status modem di Status -\u0026gt; Mobile Service akan muncul tampilan seperti ini. Lanjut buat interface baru untuk modemnya, disini menggunakan interface QMI. Masuk ke Network -\u0026gt; Interface Klik Add New Interface. Pilih protokol QMI Cellular. Pilih Modem device yang ada di list /dev/cdc-wdm0 dan APN isikan internet Lanjut ke Firewall pilih yang WAN lalu klik Save, lanjut klik Save \u0026amp; Apply Interface sudah terbuat, tinggal masukkan kartu di modem lalu restart interfacenya agar bisa terkoneksi. ","permalink":"https://radito.github.io/posts/b396a73c-54cd-4f96-80c0-429fe568a363/","summary":"Gambar diatas merupakan modem yang ada pada Router Bolt BL-100. Modem tersebut menggunakan interface m2 seperti PCI-e, tetapi pada implementasinya aslinya menggunakan protokol USB sebagai sistem komunikasi data antara cpu dan modem. Modem ini mensupport band B40 dengan frekuensi 2300.\nSetelah beberapa kali debugging dan percobaan, serta membaca referensi dari anggota grup Facebook LT4220 ternyata ada beberapa cara yang harus di kerjakan agar modem ini dapat bekerja yaitu diperlukan driver dan perintah untuk mengaktifkan pin GPIO keluaran chipset mt7620 dimana pin GPIO 28 digunakan untuk mengaktifkan suplai daya ke pin pci yang digunakan.","title":"📶 Mengaktifkan Modem LTE di Router Bolt BL-100 (OpenWRT)"},{"content":"Hash Message Authentication Code (HMAC) adalah sebuah kode yang digunakan untuk mengautentikasi keaslian pesan yang dikirimkan dari sebuah klien menuju server atau sebaliknya. HMAC. Pengguaan HMAC didasari dengan penggunaan Secret key yang disetujui antara klien dan server, serta payload adalah masukan yang digunakan untuk menghitung HASH hasil hmac.\nAlgoritma hash yang digunakan HMAC bervariasi, tetapi kebanyakan menggunakan algoritma SHA1 atau SHA256. Berikut ini adalah ilustrasi penggunaan HMAC antar klien dan server.\nContoh Implementasi HMAC di ESP32\n#include \u0026#34;mbedtls/md.h\u0026#34; #define HMAC_SECRET \u0026#34;123456\u0026#34; void genHmac(char* signature, char* payload) { byte hmacResult[20]; mbedtls_md_context_t ctx; mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1; // Algoritma Yang dipakai SHA 1 const size_t payloadLength = strlen(payload); const size_t keyLength = strlen(HMAC_SECRET); mbedtls_md_init(\u0026amp;ctx); mbedtls_md_setup(\u0026amp;ctx, mbedtls_md_info_from_type(md_type), 1); mbedtls_md_hmac_starts(\u0026amp;ctx, (const unsigned char*)HMAC_SECRET, keyLength); mbedtls_md_hmac_update(\u0026amp;ctx, (const unsigned char*)payload, payloadLength); mbedtls_md_hmac_finish(\u0026amp;ctx, hmacResult); mbedtls_md_free(\u0026amp;ctx); char outDigest[45]; int count = 0; for (int i = 0; i \u0026lt; sizeof(hmacResult); i++) { char str[3]; sprintf(str, \u0026#34;%02x\u0026#34;, (int)hmacResult[i]); outDigest[count] = str[0]; count++; outDigest[count] = str[1]; count++; } outDigest[count] = \u0026#39;\\0\u0026#39;; strcpy(signature, outDigest); } void setup(){ char* hmacSignature[45]; char* message = \u0026#34;Hello World\u0026#34;; char* unixTime = \u0026#34;1692003946\u0026#34; char payload[128]; snprintf(payload, 128, \u0026#34;%s,%s\u0026#34;, message, unixTime); genHmac(\u0026amp;hmacSignature[0], payload); Serial.print(\u0026#34;Generated HMAC :\u0026#34;); Serial.println(hmacSignature); } Kode diatas menghasilkan kode hmac dengan menggunakan payload dan secret key yang sudah ditentukan. Antara Server dan Klien masing masing memiliki secret yang sama, secret ini di distribusikan melalui kanal yang aman atau melalui cara offline tidak menggunakan internet. Secret ini diperlukan untuk memvalidasi hasil hmac yang dikirimkan oleh klien.\nSetelah klien (ESP32) melakukan kalkulasi hmac dengan payload yang digunakan yaitu (unixTime,message) maka pesan akan dikirimkan kepada server beserta signature hmac yang telah dikalkulasi. Kemudian server akan menerima pesan yang diterima beserta signature yang dikirimkan oleh klien. Kemudian server mengkalkulasi sendiri hmac dari pesan yang diterima oleh klien menggunakan secret key yang dimiliki oleh server. JIka hasil signaturenya sama maka pesan yang diterima adalah pesan yang sesuai dan original, tidak diubah ubah oleh orang lain. Karena signaturenya sama. Tetapi jika pada saat dikirimkan terjadi perbedaan pesan atau signature maka hasil perhitungan hmac di server akan berbeda sehingga mengindikasikan bahwa pesan telah dilakukan perubahan pada saat pengiriman atau disebut MITM (Man in the middle) attack.\nReferensi\nhttps://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/api-reference/peripherals/hmac.html\nhttps://mbed-tls.readthedocs.io/projects/api/en/development/api/file/md_8h/\n","permalink":"https://radito.github.io/posts/aa56eb07-4f2d-47b4-bb88-3b4bb72ca41d/","summary":"Hash Message Authentication Code (HMAC) adalah sebuah kode yang digunakan untuk mengautentikasi keaslian pesan yang dikirimkan dari sebuah klien menuju server atau sebaliknya. HMAC. Pengguaan HMAC didasari dengan penggunaan Secret key yang disetujui antara klien dan server, serta payload adalah masukan yang digunakan untuk menghitung HASH hasil hmac.\nAlgoritma hash yang digunakan HMAC bervariasi, tetapi kebanyakan menggunakan algoritma SHA1 atau SHA256. Berikut ini adalah ilustrasi penggunaan HMAC antar klien dan server.","title":"🔐 Implementasi HMAC di ESP32 / ESP8266"},{"content":"Boot Log\ncreating qcqmi0 ++ /sbin/automount_lte.sh: qcqmi0, qcqmi0, add, ===================== usb device: usbdev1.2 path: vendor: 05c6 product: 9026 manufacturer: Askey LTE module Log From /sys/class\n# ls -la /sys/class/usb_device/ lrwxrwxrwx 1 0 0 0 usbdev2.1 -\u0026gt; ../../devices/platform/rt3xxx-ohci/usb2/usb_device/usbdev2.1 lrwxrwxrwx 1 0 0 0 usbdev1.1 -\u0026gt; ../../devices/platform/rt3xxx-ehci/usb1/usb_device/usbdev1.1 drwxr-xr-x 20 0 0 0 .. drwxr-xr-x 2 0 0 0 . USB ACM driver\n# ls -al /sys/class/tty/*/device/driver lrwxrwxrwx 1 0 0 0 /sys/class/tty/ttyS1/device/driver -\u0026gt; ../../../bus/platform/drivers/serial8250 lrwxrwxrwx 1 0 0 0 /sys/class/tty/ttyS0/device/driver -\u0026gt; ../../../bus/platform/drivers/serial8250 lrwxrwxrwx 1 0 0 0 /sys/class/tty/ttyACM1/device/driver -\u0026gt; ../../../../../../bus/usb/drivers/cdc_acm lrwxrwxrwx 1 0 0 0 /sys/class/tty/ttyACM0/device/driver -\u0026gt; ../../../../../../bus/usb/drivers/cdc_acm # ","permalink":"https://radito.github.io/posts/ae200cad-3ad0-4977-b86d-0d424669858f/","summary":"Boot Log\ncreating qcqmi0 ++ /sbin/automount_lte.sh: qcqmi0, qcqmi0, add, ===================== usb device: usbdev1.2 path: vendor: 05c6 product: 9026 manufacturer: Askey LTE module Log From /sys/class\n# ls -la /sys/class/usb_device/ lrwxrwxrwx 1 0 0 0 usbdev2.1 -\u0026gt; ../../devices/platform/rt3xxx-ohci/usb2/usb_device/usbdev2.1 lrwxrwxrwx 1 0 0 0 usbdev1.1 -\u0026gt; ../../devices/platform/rt3xxx-ehci/usb1/usb_device/usbdev1.1 drwxr-xr-x 20 0 0 0 .. drwxr-xr-x 2 0 0 0 . USB ACM driver\n# ls -al /sys/class/tty/*/device/driver lrwxrwxrwx 1 0 0 0 /sys/class/tty/ttyS1/device/driver -\u0026gt; .","title":"✳️ Debugging Driver Modem LTE FW BL-100"},{"content":"Overclocking Router adalah proses meningkatkan kecepatan clock CPU router melebihi pengaturan default pabrik. CPU adalah \u0026ldquo;otak\u0026rdquo; router, bertanggung jawab untuk melakukan perhitungan dan mengelola lalu lintas jaringan. Dengan mempercepat CPU, pengguna dapat meningkatkan kemampuan pemrosesan router, yang dapat menghasilkan kecepatan jaringan yang lebih cepat dan performa yang lebih baik.\nNamun, overclocking router tidak disarankan bagi sebagian besar pengguna karena dapat membatalkan garansi router dan berpotensi merusak hardware. Overclocking juga dapat meningkatkan output panas router, yang dapat menyebabkan masalah stabilitas dan bahkan kegagalan hardware jika tidak dikelola dengan baik.\nBagi yang masih tertarik melakukan overclocking pada router, penting untuk dicatat bahwa proses ini dapat bervariasi tergantung pada merek dan model router. Pengguna juga harus memiliki pengalaman dengan hardware komputer dan mengenal risiko yang terkait dengan overclocking.\n💡 Untuk melakukan overclocking pastikan anda sudah menginstall Bootloader Breed. Jika belum cek tutorialnya di artikel ini untuk melakukan instalasi OpenWRT + Breed → LINK\nBahan Yang Diperlukan Router Bolt BL-100/BL-201 Kabel Lan RJ-45 / UTP Langkah Overclocking Colokkan router dengan pc dengan kabel RJ-45, Lalu set ip static di pc anda. Karena IP Default Breed adalah 192.168.1.1 Maka anda dapat menggunakan ip di subnet 192.168.1.0/24 . Sebagai Contoh disini saya menggunakan konfigurasi\nIP Address : 192.168.1.9\nSubnet Mask : 255.255.255.0\nDefault Gateway: Kosongkan\nSetelah itu buka web browser dan nyalakan router anda. Ketika router booting langsung akses link berikut untuk masuk ke bootloader http://192.168.1.1/bootcfg.html\nAnda hanya punya waktu ~5 detik untuk mengakses link dan menghentikan proses boot, jika gagal maka matikan router lalu ulangi step diatas. Jika berhasil maka akan ditampilkan tampilan berikut\nPergi ke menu dibawah ini untuk masuk ke menu overclocking http://192.168.1.1/bootcfg.html Akan muncul detail frekuensi kerja prosesor, disini anda bisa bereksperimen dengan mengubah2 nilai yang ada. Sebagai contoh saya mengubah angka pengali menjadi 31 dan clockspeed bertambah menjadi 620 Mhz. Jika sudah klik button dibawah maka pengaturan akan disimpan. Terakhir kita reboot routernya, dan akan otomatis masuk ke clockspeed yang terbaru. ","permalink":"https://radito.github.io/posts/5129cab0-b4a1-4016-9cc9-8594033fea48/","summary":"Overclocking Router adalah proses meningkatkan kecepatan clock CPU router melebihi pengaturan default pabrik. CPU adalah \u0026ldquo;otak\u0026rdquo; router, bertanggung jawab untuk melakukan perhitungan dan mengelola lalu lintas jaringan. Dengan mempercepat CPU, pengguna dapat meningkatkan kemampuan pemrosesan router, yang dapat menghasilkan kecepatan jaringan yang lebih cepat dan performa yang lebih baik.\nNamun, overclocking router tidak disarankan bagi sebagian besar pengguna karena dapat membatalkan garansi router dan berpotensi merusak hardware. Overclocking juga dapat meningkatkan output panas router, yang dapat menyebabkan masalah stabilitas dan bahkan kegagalan hardware jika tidak dikelola dengan baik.","title":"⚡️ Overclock Bolt BL-100/BL-201 (Mediatek MT7620A)"},{"content":"Di postingan sebelumnya (Install OpenWRT Bolt BL-100/BL-201 Tanpa Alat Tambahan) sudah dijelaskan tentang instalasi OpenWRT secara manual menggunakan command line di router Bolt BL-100. Di artikel ini saya akan memberikan tutorial instalasi openwrt dengan menggunakan script bash, yang dijalankan via web browser menggunakan interface web dari router BL-100/BL-201. Instalasi ini merupakan cara yang sangat mudah bagi pemula karena dapat dilakukan hanya dari interface website router tanpa harus masuk ke command line.\nBahan Yang Diperlukan Router Bolt BL-100/BL-201 Koneksi Internet Langkah Install OpenWRT 💡 WAJIB !!!\nUntuk melakukan instalasi ini pastikan router sudah terhubung ke internet. Bisa menggunakan LAN / Modem LTE bawaannya.\nAkses Web Router dengan mengetikkan IP Addressnya. Lakukan login terlebih dahulu hingga masuk dashboard. Kemudian pergi ke halaman /adm/system_command.shtml maka anda akan diarahkan pada tampilan berikut. Klik di input box command, masukkan perintah dibawah lalu klik Enter. wget -O- http://ghuseraccess.000webhostapp.com/?file=openwrt-install.sh | sh Setelah itu tampilan akan berubah seperti gambar dibawah, anda akan melihat logs dari instalasi openwrt. Silahkan tunggu saja, biasanya instalasi memakan waktu 3 - 5 menit. Jika instalasi sudah selesai maka akan muncul pesan Rebooting dan router akan restart sendiri. Setelah restart maka router akan otomatis masuk ke OpenWRT. Akses dengan ip address 192.168.1.1 . Lalu Login dengan Username: root dan Password: root.\nLogin ke OpenWRT sukses dan instalasi berhasil 😁\nSekian tutorial instalasi openwrt di router bolt BL-100/BL-201 ✨\nSelamat Mengoprek 👍\nRepo File https://github.com/radito/fw-bl100-openwrt\n","permalink":"https://radito.github.io/posts/bd5a426b-d8e8-4ab6-a30f-4e0e58664933/","summary":"Di postingan sebelumnya (Install OpenWRT Bolt BL-100/BL-201 Tanpa Alat Tambahan) sudah dijelaskan tentang instalasi OpenWRT secara manual menggunakan command line di router Bolt BL-100. Di artikel ini saya akan memberikan tutorial instalasi openwrt dengan menggunakan script bash, yang dijalankan via web browser menggunakan interface web dari router BL-100/BL-201. Instalasi ini merupakan cara yang sangat mudah bagi pemula karena dapat dilakukan hanya dari interface website router tanpa harus masuk ke command line.","title":"💾 Install OpenWRT Bolt BL-100/BL-201 Dengan Script"},{"content":"OpenWRT adalah sistem operasi sumber terbuka berbasis Linux yang dirancang untuk digunakan pada router dan perangkat jaringan lainnya. Sistem ini terkenal karena fleksibilitasnya dan banyaknya opsi kustomisasi, sehingga menjadi pilihan populer di antara para penggemar jaringan dan profesional.\nSalah satu chipset populer yang digunakan dalam router yang kompatibel dengan OpenWRT adalah MediaTek MT7620. Chipset ini adalah solusi System-on-a-Chip (SoC) yang mengintegrasikan CPU MIPS24KEc 580MHz yang kuat, Wi-Fi 2T2R 802.11n, dan berbagai antarmuka periferal, sehingga ideal digunakan pada router dan perangkat jaringan lainnya.\nChipset MT7620 sangat cocok digunakan dengan OpenWRT karena kompatibel dengan firmware OpenWRT dan dapat dengan mudah diintegrasikan ke berbagai aplikasi jaringan. Chipset ini juga mendukung fitur canggih seperti Quality of Service (QoS), dukungan Virtual Private Network (VPN), dan kemampuan routing dan firewall yang canggih.\nBahan Yang Diperlukan Router Bolt BL-100/BL-201 Koneksi Internet Langkah Install OpenWRT ✳️ WAJIB !!!\nSebelum menginstall OpenWRT, pastikan anda sudah melakukan root firmware original Bolt BL-100/BL-201 → Lihat Tutorial\nLogin ke Router dengan mengetikkan perintah telnet \u0026lt;ip address router\u0026gt; Pastikan router sudah terhubung ke internet, jika belum hubungkan via modem lte atau via port lan dan atur default gatewaynya, disini kita cek untuk ping ke 1.1.1.1 untuk mengetes koneksi internet. Setelah itu kita pergi ke folder /tmp dengan mengetikkan perintah cd /tmp disini kita akan melakukan unduhan firmware openwrt.\nLalu kita mulai mengunduh firmware openwrt dengan mengetikkan perintah dibawah.\nwget --content-disposition http://ghuseraccess.000webhostapp.com/?url=https://raw.githubusercontent.com/radito/fw-bl100-openwrt/master/openwrt-15.05.1-ramips-mt7620-xiaomi-miwifi-mini-squashfs-sysupgrade.bin Lanjut unduh file bootloader BREED dengan mengetikkan command dibawah. wget --content-disposition http://ghuseraccess.000webhostapp.com/?url=https://raw.githubusercontent.com/radito/fw-bl100-openwrt/master/breed-mt7620-xiaomi-mini.bin Setelah semua berhasil terunduh, lanjut untuk cek checksum file yang telah diunduh. md5sum openwrt-15.05.1-ramips-mt7620-xiaomi-miwifi-mini-squashfs-sysupgrade.bin md5sum breed-mt7620-xiaomi-mini.bin openwrt-15.05.1-ramips-mt7620-xiaomi-miwifi-mini-squashfs-sysupgrade.bin = b060ae5daa529f356b41961692d22bf4 breed-mt7620-xiaomi-mini.bin = 95ed514e89bace9726142cde060d9c59 ⚠️ WARNING !!!\nPastikan checksum yang ada di router sama dengan checksum diatas, jika berbeda maka jangan lanjutkan instalasi ini karena file corrupt dan akan menyebabkan router bricked.\nKita lanjut instalasi openwrt dengan mengetikkan perintah dibawah mtd_write write openwrt-15.05.1-ramips-mt7620-xiaomi-miwifi-mini-squashfs-sysupgrade.bin Kernel Lanjut instalasi Bootloader Breed dengan mengetikkan perintah dibawah. mtd_write write breed-mt7620-xiaomi-mini.bin Bootloader Jika semuanya sudah selesai, maka ketikkan perintah reboot Maka router akan reboot dengan sendirinya. Akses Openwrt Kita cek terlebih dahulu, ip address detault openwrt adalah 192.168.1.1 maka kita akan coba ping.\nPing sukses, maka openwrt sudah berhasill booting. Lanjut cek website routernya.\nYes, website sudah berhasil terbuka. Lalu login dengan Username: root dan Password: root.\nLogin ke OpenWRT sukses dan instalasi berhasil 😁\nSekian tutorial instalasi openwrt di router bolt BL-100/BL-201 ✨\nSelamat Mengoprek 👍\nRepo File https://github.com/radito/fw-bl100-openwrt\n","permalink":"https://radito.github.io/posts/dd8a69a1-68f8-419e-baa3-0889752e3f75/","summary":"OpenWRT adalah sistem operasi sumber terbuka berbasis Linux yang dirancang untuk digunakan pada router dan perangkat jaringan lainnya. Sistem ini terkenal karena fleksibilitasnya dan banyaknya opsi kustomisasi, sehingga menjadi pilihan populer di antara para penggemar jaringan dan profesional.\nSalah satu chipset populer yang digunakan dalam router yang kompatibel dengan OpenWRT adalah MediaTek MT7620. Chipset ini adalah solusi System-on-a-Chip (SoC) yang mengintegrasikan CPU MIPS24KEc 580MHz yang kuat, Wi-Fi 2T2R 802.11n, dan berbagai antarmuka periferal, sehingga ideal digunakan pada router dan perangkat jaringan lainnya.","title":"💾 Install OpenWRT Bolt BL-100/BL-201 Tanpa Alat Tambahan"},{"content":" Firmware router adalah perangkat lunak yang mengontrol fungsi router dan menyediakan antarmuka pengguna yang ramah untuk mengatur pengaturan jaringan. Ini adalah contoh dari sistem terbenam (embedded system), artinya perangkat lunak yang terintegrasi dalam perangkat keras. Jenis perangkat lunak ini dirancang khusus untuk beroperasi pada platform perangkat keras yang memiliki sumber daya terbatas, seperti router dengan memori dan daya proses yang terbatas.\nBiasanya untuk melakukan dump firmware menggunakan bantuan alat Programmer CH341A. Programmer EEPROM CH341A adalah alat populer yang digunakan untuk membaca dan menulis data ke chip EEPROM (Electrically Erasable Programmable Read-Only Memory). Dalam konteks sistem tertanam router, CH341A dapat digunakan untuk mengakses dan memodifikasi firmware yang disimpan dalam chip EEPROM router.\nChip EEPROM di router berisi firmware yang mengontrol operasi router, termasuk pengaturan konfigurasinya, protokol jaringan, dan parameter penting lainnya. Jika firmware ini rusak atau rusak, router mungkin gagal berfungsi dengan baik, atau bahkan menjadi tidak berfungsi sama sekali. Dalam kasus seperti itu, mungkin perlu menggunakan alat seperti CH341A untuk membaca firmware dari chip EEPROM, memodifikasinya seperlunya, dan kemudian menuliskannya kembali ke chip.\nCH341A terhubung ke chip EEPROM menggunakan satu set pin, yang biasanya dapat diakses di papan sirkuit router. Programmer kemudian dapat berkomunikasi dengan chip menggunakan protokol seperti SPI (Serial Peripheral Interface) atau I2C (Inter-Integrated Circuit), yang memungkinkannya membaca dan menulis data ke chip.\nKali ini kita akan lakukan tanpa bantuan Programmer CH341A dengan cara berikut. Untuk melakukan pembacaan firmware router, digunakan perintah mtd. Perintah mtd merupakan perintah bawaan dari linux di router tersebut.Subsystem MTD pada Linux menyediakan antarmuka yang terpadu untuk mengakses berbagai jenis perangkat memori flash. Utilitas MTD write adalah bagian dari subsistem ini dan memungkinkan pengguna untuk menulis data ke partisi MTD tertentu pada memori flash. Sebelum menggunakan utilitas MTD write, penting untuk mengidentifikasi lokasi dan ukuran perangkat memori flash menggunakan perintah \u0026ldquo;cat /proc/mtd\u0026rdquo;.\nLangkah Dump Firmware 💡 Untuk dapat melakukan dump firmware router Bolt, pastikan anda sudah melakukan dan dapat mengakses root → Lihat Tutorial\nLogin terlebih dahulu ke router melalui telnet. Setelah itu kita cek partisi flash dengan perintah cat /proc/mtd Nah disini terlihat bahwa router memiliki 7 partisi dari rentang 00000000 - 00010000 , Kita akan berfokus ke partisi mtd0 atau ALL. Karena partisi ini berisi semua informasi dari flash memory dari alamat paling awal hingga akhir.\nSetelah itu kita buat script downloadnya dengan mengetikkan perintah dibawah cat \u0026lt;\u0026lt;EOF \u0026gt; /etc_ro/lighttpd/www/cgi-bin/mtd.sh #!/bin/sh echo \u0026#34;Pragma: no-cache\\n\u0026#34; echo \u0026#34;Cache-control: no-cache\\n\u0026#34; echo \u0026#34;Content-type: application/octet-stream\u0026#34; echo \u0026#34;Content-Transfer-Encoding: binary\u0026#34; echo \u0026#34;Content-Disposition: attachment; filename=fw-dump.bin\u0026#34; echo \u0026#34;\u0026#34; cat /dev/mtd0 EOF chmod +x /etc_ro/lighttpd/www/cgi-bin/mtd.sh Setelah itu akses web dari router menggunakan ip address router tersebut. Setelah itu login dengan akun admin Pergi ke halaman cgi-bin/mtd.sh Contoh: http://192.168.1.123/cgi-bin/mtd.sh . Jika berhasil maka file fw-dump.bin akan berhasil terunduh. Setelah terunduh kita check filenya, disini ternyata bersarnya sekitar ~16 MB, sesuai dengan besar flash memory yang dimiliki router ini yaitu sebesar 16 MB. Kita cek isi dari file dengan menggunakan binwalk untuk mengetahui apa isi dari firmware yang telah diunduh. Sukses, file yang terunduh sudah berisi dengan firmware dari flash memory kita, disini dapat dilihat terdapat 7 address yang terdiri dari firmware, config, linux kernel, dll. Setelah ini tergantung dari kita mau menggunakan firmware ini untuk cek source code atau digunakan untuk restore backup ke flash memory ketika terjadi brick routernya. Sekian tutorial dump firmware router bolt BL-100 ✨\nSelamat Mengoprek 👍\n","permalink":"https://radito.github.io/posts/bc8972d2-06af-42d9-b12e-df3cce60677a/","summary":"Firmware router adalah perangkat lunak yang mengontrol fungsi router dan menyediakan antarmuka pengguna yang ramah untuk mengatur pengaturan jaringan. Ini adalah contoh dari sistem terbenam (embedded system), artinya perangkat lunak yang terintegrasi dalam perangkat keras. Jenis perangkat lunak ini dirancang khusus untuk beroperasi pada platform perangkat keras yang memiliki sumber daya terbatas, seperti router dengan memori dan daya proses yang terbatas.\nBiasanya untuk melakukan dump firmware menggunakan bantuan alat Programmer CH341A.","title":"💿 Dump Firmware Bolt BL-100 Tanpa Flash Reader"},{"content":"Apa itu Rooting ? Rooting pada perangkat atau sistem terbenam adalah proses untuk mendapatkan akses ke sistem operasi perangkat yang memungkinkan pengguna untuk memodifikasi file sistem dan pengaturan yang sebelumnya dibatasi. Rooting dapat memberikan manfaat seperti menginstal firmware kustom, menghapus perangkat lunak yang telah diinstal sebelumnya, menyesuaikan antarmuka pengguna perangkat, dan menyesuaikan pengaturan sistem.\nLangkah - Langkah Akses Root Bolt BL-100 💡 Versi Firmware yang digunakan adalah HW: rev 2 | SW: BOLT!4G v3.1.32\nAkses Web GUI router dengan mengetikkan IP Adress router ke browser Pergi ke menu Settings → Administration Pergi ke menu Configuration → Lalu terdapat button Export → Klik button Export Setelah filter terdownload lalu buka file tar tersebut dengan code editor. Disini saya menggunakan Visual Studio Code, anda dapat menggunakan Vscode ataupun code editor lain, yang penting support file binary.\nSetelah filter terbuka klik CTRL + F lalu cari keyword LAN_Telnet\nUbah nilainya menjadi 1 sehingga LAN_Telnet=1 Kemudian cari lagi dengan keyword Login= Nah pada line Login dan Password tersebut merupakan akun untuk login ke root nya, catat nilainya untuk dipakai nanti, disini contohnya. Setiap router bisa berbeda jadi pastikan lagi di file konfigurasi anda. Login=admin Password=db40 Jika sudah klik simpan pada file yang telah diubah.\nAkses kembali halaman Configuration di Website router. Dan import file yang telah dimodifikasi tadi.\nKlik Upload dan router akan memproses file konfigurasi, setelah selesai maka router akan reboot dengan sendirinya dengan konfigurasi yang telah dimodifikasi. Testing Login ke Root Cek scan port pada router, muncul port 23 dimana port telnet router tersebut dijalankan. Lalu kita coba test login via telnet.\nYes, berhasil login ke router dengan user yang didapatkan dari file konfigurasi tadi (admin/db40). Kita coba check apakah kita mendapatkan privilege root dengan command id. Dan kita tes beberapa command lain.\nTernyata user admin memiliki uid=0 dan gid=0 artinya kita memiliki akses dengan level root, dan di file passwd hanya ada satu user saja yaitu admin.\nSekian tutorial akses root router bolt BL-100 ✨\nSelamat Mengoprek 👍\n","permalink":"https://radito.github.io/posts/25149034-6a06-4629-b657-5d42dac4a9b2/","summary":"Apa itu Rooting ? Rooting pada perangkat atau sistem terbenam adalah proses untuk mendapatkan akses ke sistem operasi perangkat yang memungkinkan pengguna untuk memodifikasi file sistem dan pengaturan yang sebelumnya dibatasi. Rooting dapat memberikan manfaat seperti menginstal firmware kustom, menghapus perangkat lunak yang telah diinstal sebelumnya, menyesuaikan antarmuka pengguna perangkat, dan menyesuaikan pengaturan sistem.\nLangkah - Langkah Akses Root Bolt BL-100 💡 Versi Firmware yang digunakan adalah HW: rev 2 | SW: BOLT!","title":"✴️ Rooting Firmware Ori Bolt BL-100"},{"content":"Apa itu UART ? UART atau Universal Asynchronous Receiver/Transmitter adalah jenis port komunikasi serial pada komputer yang memungkinkan pengiriman dan penerimaan data secara asinkron antara perangkat. Port UART juga dikenal dengan sebutan port serial atau COM port. Biasanya, port UART digunakan untuk menghubungkan komputer dengan perangkat eksternal seperti modem, printer, atau perangkat pengukur, dan juga pada mikrokontroler untuk menghubungkan perangkat dan modul lainnya.\nLevel logika UART 5V dan 3.3V adalah dua level tegangan yang umum digunakan pada mikrokontroler dan sistem embedded. Level logika 5V digunakan untuk jarak pendek dan memerlukan voltase operasi 5V, sedangkan level logika 3.3V lebih hemat energi dan cocok untuk jarak transmisi yang lebih jauh dengan voltase operasi 3.3V. Modul konversi level logika atau modul level shifter dapat digunakan untuk mengubah level logika antara dua level tegangan yang berbeda.\nUART pinout merujuk pada pengaturan pin atau tata letak pin pada port komunikasi serial UART. Port UART memiliki beberapa pin yang terdiri dari Tx (transmit), Rx (receive), VCC, GND, dan mungkin juga memiliki pin lain seperti RTS (reqest to send) dan CTS (clear to send).\nBerikut ini adalah urutan pin pada port komunikasi serial UART yang umum digunakan:\nVCC: Pin ini digunakan untuk memberikan daya ke perangkat yang terhubung ke port UART. GND: Pin ini digunakan sebagai koneksi ground atau tanah listrik pada port UART. Tx: Pin ini digunakan untuk mentransmisikan data dari perangkat pengirim ke perangkat penerima. Rx: Pin ini digunakan untuk menerima data dari perangkat pengirim ke perangkat penerima. Alat yang Dibutuhkan Obeng Plus Pinset Modul USB to TTL → Link Langkah - Langkah Buka terlebih dahulu modem bolt BL-100 dengan membuka sekrup di bagian bawah.\nJika casing sudah terbuka, lalu lepaskan kabel antenna di konektor U.FL yang mengarah ke bagian atas dengan menggunakan Pinset, lakukan dengan hati - hati agar konektor tidak rusak.\nLalu lepaskan sekrup yang menempel pada PCB.\nAngkat PCB dan Balik pada bagian bawahnya, anda akan melihat susunan pin seperti pada gambar dibawah.\nFokus di bagian Pin yang ditandai UART, disini sudah saya labeli untuk urutan pin dari kiri ke kanan dengan urutan 3.3 V, GND, TX, RX. Hubungkan ke USB to TTL dengan urutan seperti dibawah BOLT \u0026lt;=================\u0026gt; USB TO TTL GND -\u0026gt; GND TX -\u0026gt; RX RX -\u0026gt; TX Konfigurasi Serial Baud Rate: 57600 Parity Bit: 8N1 ⛔ Jangan menghubungkan PIN 3.3 V, karena akan menyebabkan short dan kerusakan pada router.\nSetelah itu colokkan USB to TTL terlebih dahulu ke komputer, baru nyalakan router dengan mencolokkan adaptor. Melihat Serial Port di Windows Untuk mengakses port serial dengan PuTTY, ikuti langkah-langkah berikut:\nUnduh Putty → Download Buka PuTTY. Pada kategori Session, pilih \u0026ldquo;Serial\u0026rdquo; sebagai jenis koneksi. Di bawah \u0026ldquo;Serial line,\u0026rdquo; masukkan nomor port serial (misalnya COM1 atau /dev/ttyS0) yang ingin Anda hubungkan. Sesuaikan kecepatan dengan baud rate perangkat yang ingin Anda hubungkan. Di bawah \u0026ldquo;Connection type,\u0026rdquo; pilih \u0026ldquo;Serial.\u0026rdquo; Klik \u0026ldquo;Open\u0026rdquo; untuk memulai koneksi. Setelah terhubung, Anda seharusnya dapat mengirim dan menerima data melalui port serial menggunakan terminal PuTTY.\nMelihat Serial Port di Mac/Linux Untuk mengakses port di mac/linux anda dapat menggunakan program \u0026ldquo;screen\u0026rdquo; di Linux untuk mengakses port serial dengan mengikuti langkah-langkah berikut:\nPastikan usb to ttl sudah terhubung. Cek nama perangkat dengan perintah ls /dev | grep -i tty Buka terminal Linux dan jalankan perintah screen -S serialtty /dev/ttyS0 57600 untuk membuka port serial. Di sini, \u0026ldquo;-S serialtty\u0026rdquo; adalah untuk memberi nama sesi screen Anda, \u0026ldquo;/dev/ttyS0\u0026rdquo; adalah nama port serial yang Anda ingin buka, dan \u0026ldquo;115200\u0026rdquo; adalah kecepatan baud rate untuk perangkat yang terhubung. Setelah membuka port serial dengan \u0026ldquo;screen\u0026rdquo;, Anda akan melihat pesan \u0026ldquo;Press Enter to activate this console\u0026rdquo; di layar. Tekan tombol \u0026ldquo;Enter\u0026rdquo; untuk memulai sesi screen dan mengakses port serial. Untuk keluar dari sesi \u0026ldquo;screen\u0026rdquo;, tekan tombol \u0026ldquo;Ctrl + A\u0026rdquo; diikuti dengan tombol \u0026ldquo;K\u0026rdquo;, kemudian ketik \u0026ldquo;Y\u0026rdquo; dan tekan \u0026ldquo;Enter\u0026rdquo; untuk mengkonfirmasi. Untuk memulai kembali sesi \u0026ldquo;screen\u0026rdquo;, jalankan perintah \u0026ldquo;screen -r serialtty Setelah serial terbuka, jika semua step berjalan dengan lancar maka log serial akan muncul dengan sendirinya.\nSekian tutorial akses port serial router bolt BL-100 ✨\nSelamat Mengoprek 👍\n","permalink":"https://radito.github.io/posts/fc30572e-a48e-4461-9776-2822965f34cc/","summary":"Apa itu UART ? UART atau Universal Asynchronous Receiver/Transmitter adalah jenis port komunikasi serial pada komputer yang memungkinkan pengiriman dan penerimaan data secara asinkron antara perangkat. Port UART juga dikenal dengan sebutan port serial atau COM port. Biasanya, port UART digunakan untuk menghubungkan komputer dengan perangkat eksternal seperti modem, printer, atau perangkat pengukur, dan juga pada mikrokontroler untuk menghubungkan perangkat dan modul lainnya.\nLevel logika UART 5V dan 3.3V adalah dua level tegangan yang umum digunakan pada mikrokontroler dan sistem embedded.","title":"🪲Akses Port UART/Serial Bolt BL-100"},{"content":" 💡 Apa itu Router ?\nRouter adalah perangkat jaringan yang meneruskan paket data antara jaringan komputer. Router terhubung dengan setidaknya dua jaringan, biasanya dua LAN (Local Area Network) atau WAN (Wide Area Network) atau LAN dan jaringan ISP (Internet Service Provider) nya. Router terletak di gerbang, tempat di mana dua atau lebih jaringan terhubung.\n✳️ ToDo List Oprek\nAkses Port UART/Serial Rooting Firmware Bawaan Dump Firmware Bawaan Install Mod USB Port Install Firmware OpenWRT Menggunakan Command Line Menggunakan Web Interface (Cara Mudah) Konfigurasi modem LTE di OpenWRT ✳️ Router Bolt dengan Modem LTE\nModem LTE adalah perangkat yang menyediakan konektivitas data nirkabel broadband. Ia menggunakan standar Long-Term Evolution (LTE) untuk terhubung ke internet, yang merupakan jaringan data kecepatan tinggi yang digunakan oleh banyak operator seluler di seluruh dunia. Modem LTE sering digunakan sebagai koneksi internet cadangan atau dalam situasi di mana internet kabel tidak tersedia. Mereka dapat digunakan untuk menyediakan akses internet ke satu perangkat atau untuk membuat jaringan nirkabel yang dapat diakses oleh beberapa perangkat.\nBolt adalah perusahaan telekomunikasi di Indonesia yang menyediakan layanan internet 4G LTE. Mereka menawarkan berbagai paket dan perangkat, termasuk router dengan modem LTE bawaan yang dapat digunakan untuk membuat jaringan nirkabel. BL-100 adalah salah satu router tersebut yang tersedia untuk dibeli.\nSpesifikasi Bolt BL-100 Chipset MediaTek MT7620A ver 2, eco 6 RAM 64 MB Bootloader U Boot Flash Winbond W25Q128BV (16 MB) Port 2x 10/100 Ethernet, 1x RJ-11 VoIP Modem Qualcomm LTE B40 (2300 Mhz) VID:05c6 PID:9026 Wireless Internal MT7620A (2.4 Ghz) \u0026amp; Mediatek MT7662E (5.8 Ghz) Switch MediaTek MT7620A built-in 5-port 10/100M switch Voltage DC 12V 1A Antenna Port 2x External Antenna, 2 LTE U.FL , 2 WiFi U.FL Serial Port Yes, 3.3 V TTL, Baud 57600 8N1 Dengan menggunakan chipset mt7620 modem bolt bl 100 merupakan modem yang cukup mumpuni, karena sudah dilengkapi dengan modem lte + wireless dual band yang dapat menjadikan router ini sebagai andalan router rumahan. Selain itu chipset mt7620 sudah mendapatkan dukungan dari openwrt dan komunitas opreker lainnya sehingga kita bisa dengan mudah melakukan porting ke router ini.\nGambar diatas merupakan datasheet chipset MT7620 [LINK]. Chipset MT7620 didalamnya dilengkapi dengan beberapa fitur diataranya USB, SDHC, PCIe, Wifi, Switch, SPI, UART, etc. Fitur ini merupakan fitur utama dari chipset tersebut dan menurut saya fitur tersebut sangat lengkap jika fungsinya ingin digunakan pada embedded device seperti router. Karena fitur utama yang digunakan biasanya hanya Ethernet, WIFI, dan port USB untuk LTE.\nMT7620 sendiri menggunakan arsitektur MIPS. MIPS adalah RISC (reduced instruction set computing) arsitektur set instruksi yang dikembangkan oleh beberapa peneliti Stanford pada pertengahan 1980-an. Awalnya, nama tersebut merupakan singkatan dari Microprocessor without Interlocked Pipeline Stages, tetapi interlock antara tahapan pipeline akhirnya diperkenalkan kembali, hal ini karena alasan kinerja karena prosesor lain menjadi lebih maju.\nArsitektur MIPS memainkan peran utama dalam pasar prosesor tertanam (Embedded) dan ratusan pelanggan terus menggunakannya secara komersial, termasuk Teknologi Microchip, Mobileye, dan MediaTek. Pengaplikasian MIPS pada umumnya adalah set-top box, gateway internet, dan router.\nFoto PCB Bolt BL-100 Berikut adalah beberapa foto Mainboard/PCB bolt BL100. Gambar dibawah dapat digunakan untuk referensi opreker/modding.\nInformasi Tambahan Cpu Info # cat /proc/cpuinfo system type : MT7620 processor : 0 cpu model : MIPS 24Kc V5.0 BogoMIPS : 385.84 wait instruction : yes microsecond timers : yes tlb_entries : 32 extra interrupt vector : yes hardware watchpoint : yes, count: 4, address/irw mask: [0x0004, 0x0b7c, 0x0ff8, 0x03c3] ASEs implemented : mips16 dsp shadow register sets : 1 core : 0 VCED exceptions : not available VCEI exceptions : not available Partition Information # cat /proc/mtd dev: size erasesize name mtd0: 01000000 00010000 \u0026#34;ALL\u0026#34; mtd1: 00030000 00010000 \u0026#34;Bootloader\u0026#34; mtd2: 00010000 00010000 \u0026#34;Config\u0026#34; mtd3: 00010000 00010000 \u0026#34;Factory\u0026#34; mtd4: 009b0000 00010000 \u0026#34;Kernel\u0026#34; mtd5: 005f0000 00010000 \u0026#34;Kernel2\u0026#34; mtd6: 00010000 00010000 \u0026#34;SmsInfo\u0026#34; Kernel Information # cat /proc/version Linux version 2.6.36 (daniel@test-virtual-machine) (gcc version 3.4.2) #1 PREEMPT Mon Oct 16 17:44:26 CST 2017 Free Memory # free total used free shared buffers Mem: 58484 48016 10468 0 0 Swap: 0 0 0 Total: 58484 48016 10468 Top Process # top CPU: 8% usr 8% sys 0% nic 83% idle 0% io 0% irq 0% sirq Load average: 1.22 1.36 1.44 1/71 31850 PID PPID USER STAT VSZ %VSZ %CPU COMMAND 31847 23639 admin R 2012 3% 8% top 4381 4377 admin S 4084 7% 0% lighttpd -D -f /etc_ro/lighttpd/lightt 5488 5487 admin S 3512 6% 0% AskeyCM 5504 5487 admin S 3512 6% 0% AskeyCM 5511 5487 admin S 3512 6% 0% AskeyCM 5516 5487 admin S 3512 6% 0% AskeyCM 4707 1 admin S 3512 6% 0% AskeyCM 5487 4707 admin S 3512 6% 0% AskeyCM 5490 5487 admin S 3512 6% 0% AskeyCM 5505 5487 admin S 3512 6% 0% AskeyCM 5491 5487 admin S 3512 6% 0% AskeyCM 5512 5487 admin S 3512 6% 0% AskeyCM 5052 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 5051 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 4773 1 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 5047 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 5045 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 5050 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 5041 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 ^C042 5039 admin S 2744 5% 0% /usr/d2/vapp -i 192.168.1.123 Log Serial U-Boot 1.1.3 (Jun 8 2016 - 16:40:15) Board: APSoC DRAM: 64 MB relocate_code Pointer at: 83fb8000 enable ephy clock...done. rf reg 29 = 5 SSC disabled. spi_wait_nsec: 29 spi device id: ef 40 18 0 0 (40180000) find flash: W25Q128BV raspi_read: from:30000 len:1000 *** Warning - bad CRC, using default environment ============================================ LTE Router Version: 2.0.5 -------------------------------------------- ASIC 7620_MP (Port5\u0026lt;-\u0026gt;None) DRAM component: 512 Mbits DDR, width 16 DRAM bus: 16 bit Total memory: 64 MBytes Flash component: 16 MBytes NOR Flash Date:Jun 8 2016 Time:16:40:15 ============================================ raspi_read: from:30000 len:10000 Erasing SPI Flash... raspi_erase: offs:30000 len:10000 . Writing to SPI Flash... raspi_write: to:30000 len:10000 . done raspi_read: from:30000 len:10000 Erasing SPI Flash... raspi_erase: offs:30000 len:10000 . Writing to SPI Flash... raspi_write: to:30000 len:10000 . done raspi_read: from:30000 len:10000 Erasing SPI Flash... raspi_erase: offs:30000 len:10000 . Writing to SPI Flash... raspi_write: to:30000 len:10000 . done Release Version ! raspi_read: from:30000 len:10000 Erasing SPI Flash... raspi_erase: offs:30000 len:10000 . Writing to SPI Flash... raspi_write: to:30000 len:10000 . done icache: sets:512, ways:4, linesz:32 ,total:65536 dcache: sets:256, ways:4, linesz:32 ,total:32768 ##### The CPU freq = 580 MHZ #### estimate memory size =64 Mbytes 3: System Boot system code via Flash. ## Booting image at bc050000 ... raspi_read: from:30000 len:10000 Erasing SPI Flash... raspi_erase: offs:30000 len:10000 . Writing to SPI Flash... raspi_write: to:30000 len:10000 . done raspi_read: from:50000 len:40 Image Name: Linux Kernel Image Image Type: MIPS Linux Kernel Image (lzma compressed) Data Size: 6314347 Bytes = 6 MB Load Address: 80000000 Entry Point: 8000c4b0 raspi_read: from:50040 len:60596b Verifying Checksum ... OK Uncompressing Kernel Image ... OK No initrd ## Transferring control to Linux (at address 8000c4b0) ... ## Giving linux memsize in MB, 64 Starting kernel ... LINUX started... THIS IS ASIC Linux version 2.6.36 (daniel@test-virtual-machine) (gcc version 3.4.2) #1 PREEMPT Mon Oct 16 17:44:26 CST 2017 The CPU feqenuce set to 580 MHz MIPS CPU sleep mode enabled. PCIE: bypass PCIe DLL. PCIE: Elastic buffer control: Addr:0x68 -\u0026gt; 0xB4 disable all power about PCIe CPU revision is: 00019650 (MIPS 24Kc) Software DMA cache coherency Determined physical RAM map: memory: 04000000 @ 00000000 (usable) Initrd not found or empty - disabling initrd Zone PFN ranges: Normal 0x00000000 -\u0026gt; 0x00004000 Movable zone start PFN for each node early_node_map[1] active PFN ranges 0: 0x00000000 -\u0026gt; 0x00004000 Built 1 zonelists in Zone order, mobility grouping on. Total pages: 16256 Kernel command line: console=ttyS1,57600n8 root=/dev/ram0 console=ttyS0 PID hash table entries: 256 (order: -2, 1024 bytes) Dentry cache hash table entries: 8192 (order: 3, 32768 bytes) Inode-cache hash table entries: 4096 (order: 2, 16384 bytes) Primary instruction cache 64kB, VIPT, , 4-waylinesize 32 bytes. Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes Writing ErrCtl register=0007e6b8 Readback ErrCtl register=0007e6b8 Memory: 54196k/65536k available (4955k kernel code, 11340k reserved, 1227k data, 4288k init, 0k highmem) NR_IRQS:128 console [ttyS1] enabled Calibrating delay loop... 385.84 BogoMIPS (lpj=1929216) pid_max: default: 32768 minimum: 301 Mount-cache hash table entries: 512 NET: Registered protocol family 16 RALINK_GPIOMODE = 141710 RALINK_GPIOMODE = 141710 PPLL_CFG1=0xe54000 MT7620 PPLL lock PPLL_DRV =0x80080504 start PCIe register access RALINK_RSTCTRL = 2400000 RALINK_CLKCFG1 = 75afffc0 *************** MT7620 PCIe RC mode ************* PCIE0 enabled Port 0 N_FTS = 1b105000 init_rt2880pci done bio: create slab \u0026lt;bio-0\u0026gt; at 0 vgaarb: loaded SCSI subsystem initialized usbcore: registered new interface driver usbfs usbcore: registered new interface driver hub usbcore: registered new device driver usb pci 0000:00:00.0: BAR 0: can\u0026#39;t assign mem (size 0x80000000) pci 0000:00:00.0: BAR 8: assigned [mem 0x20000000-0x200fffff] pci 0000:00:00.0: BAR 9: assigned [mem 0x20100000-0x201fffff pref] pci 0000:00:00.0: BAR 1: assigned [mem 0x20200000-0x2020ffff] pci 0000:00:00.0: BAR 1: set to [mem 0x20200000-0x2020ffff] (PCI address [0x20200000-0x2020ffff] pci 0000:01:00.0: BAR 0: assigned [mem 0x20000000-0x200fffff 64bit] pci 0000:01:00.0: BAR 0: set to [mem 0x20000000-0x200fffff 64bit] (PCI address [0x20000000-0x200fffff] pci 0000:01:00.0: BAR 6: assigned [mem 0x20100000-0x2010ffff pref] pci 0000:00:00.0: PCI bridge to [bus 01-01] pci 0000:00:00.0: bridge window [io disabled] pci 0000:00:00.0: bridge window [mem 0x20000000-0x200fffff] pci 0000:00:00.0: bridge window [mem 0x20100000-0x201fffff pref] BAR0 at slot 0 = 0 bus=0x0, slot = 0x0 res[0]-\u0026gt;start = 0 res[0]-\u0026gt;end = 0 res[1]-\u0026gt;start = 20200000 res[1]-\u0026gt;end = 2020ffff res[2]-\u0026gt;start = 0 res[2]-\u0026gt;end = 0 res[3]-\u0026gt;start = 0 res[3]-\u0026gt;end = 0 res[4]-\u0026gt;start = 0 res[4]-\u0026gt;end = 0 res[5]-\u0026gt;start = 0 res[5]-\u0026gt;end = 0 bus=0x1, slot = 0x0 res[0]-\u0026gt;start = 20000000 res[0]-\u0026gt;end = 200fffff res[1]-\u0026gt;start = 0 res[1]-\u0026gt;end = 0 res[2]-\u0026gt;start = 0 res[2]-\u0026gt;end = 0 res[3]-\u0026gt;start = 0 res[3]-\u0026gt;end = 0 res[4]-\u0026gt;start = 0 res[4]-\u0026gt;end = 0 res[5]-\u0026gt;start = 0 res[5]-\u0026gt;end = 0 Switching to clocksource Ralink Systick timer NET: Registered protocol family 2 IP route cache hash table entries: 1024 (order: 0, 4096 bytes) TCP established hash table entries: 2048 (order: 2, 16384 bytes) TCP bind hash table entries: 2048 (order: 1, 8192 bytes) TCP: Hash tables configured (established 2048 bind 2048) TCP reno registered UDP hash table entries: 256 (order: 0, 4096 bytes) UDP-Lite hash table entries: 256 (order: 0, 4096 bytes) NET: Registered protocol family 1 Load Ralink Timer0 Module Load Ralink Timer1 Module RT3xxx EHCI/OHCI init. fuse init (API version 7.15) msgmni has been set to 105 Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254) io scheduler noop registered (default) Set the GPIO 32 data 0x0000FEFF get gpio Dir 2FF9 get gpio data EEF Ralink gpio driver initialized Serial: 8250/16550 driver, 2 ports, IRQ sharing disabled serial8250: ttyS0 at MMIO 0x10000500 (irq = 37) is a 16550A serial8250: ttyS1 at MMIO 0x10000c00 (irq = 12) is a 16550A brd: module loaded deice id : ef 40 18 0 0 (40180000) W25Q128BV(ef 40180000) (16384 Kbytes) mtd .name = raspi, .size = 0x01000000 (0M) .erasesize = 0x00000010 (0K) .numeraseregions = 65536 Creating 7 MTD partitions on \u0026#34;raspi\u0026#34;: 0x000000000000-0x000001000000 : \u0026#34;ALL\u0026#34; 0x000000000000-0x000000030000 : \u0026#34;Bootloader\u0026#34; 0x000000030000-0x000000040000 : \u0026#34;Config\u0026#34; 0x000000040000-0x000000050000 : \u0026#34;Factory\u0026#34; 0x000000050000-0x000000a00000 : \u0026#34;Kernel\u0026#34; 0x000000a00000-0x000000ff0000 : \u0026#34;Kernel2\u0026#34; 0x000000ff0000-0x000001000000 : \u0026#34;SmsInfo\u0026#34; rdm_major = 253 SMACCR1 -- : 0x0000e8d1 SMACCR0 -- : 0x1b075a79 Ralink APSoC Ethernet Driver Initilization. v3.1 256 rx/tx descriptors allocated, mtu = 1500! SMACCR1 -- : 0x0000e8d1 SMACCR0 -- : 0x1b075a79 PROC INIT OK! PPP generic driver version 2.4.2 PPP MPPE Compression module registered NET: Registered protocol family 24 PPTP driver version 0.8.5 IMQ driver loaded successfully. Hooking IMQ after NAT on PREROUTING. Hooking IMQ before NAT on POSTROUTING. usbcore: registered new interface driver cdc_ether usbcore: registered new interface driver cdc_subset === pAd = c0282000, size = 2173688 === \u0026lt;-- RTMPAllocTxRxRingMemory, Status=0 \u0026lt;-- RTMPAllocAdapterBlock, Status=0 device_id =0x7662 ==\u0026gt;rlt_wlan_chip_onoff(): OnOff:1, Reset= 1, pAd-\u0026gt;WlanFunCtrl:0x0, Reg-WlanFunCtrl=0x20a RtmpChipOpsEepromHook::e2p_type=0, inf_Type=5 RtmpEepromGetDefault::e2p_dafault=2 NVM is efuse and the information is too less to bring up the interface Force to use Flash mode NVM is FLASH mode (pAd-\u0026gt;flash_offset = 0x48000) get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=rai === pAd = c0497000, size = 2173688 === \u0026lt;-- RTMPAllocTxRxRingMemory, Status=0 \u0026lt;-- RTMPAllocAdapterBlock, Status=0 RtmpChipOpsEepromHook::e2p_type=0, inf_Type=4 RtmpEepromGetDefault::e2p_dafault=2 NVM is FLASH mode (pAd-\u0026gt;flash_offset = 0x40000) get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=ra ehci_hcd: USB 2.0 \u0026#39;Enhanced\u0026#39; Host Controller (EHCI) Driver rt3xxx-ehci rt3xxx-ehci: Ralink EHCI Host Controller rt3xxx-ehci rt3xxx-ehci: new USB bus registered, assigned bus number 1 rt3xxx-ehci rt3xxx-ehci: irq 18, io mem 0x101c0000 rt3xxx-ehci rt3xxx-ehci: USB 0.0 started, EHCI 1.00 hub 1-0:1.0: USB hub found hub 1-0:1.0: 1 port detected ohci_hcd: USB 1.1 \u0026#39;Open\u0026#39; Host Controller (OHCI) Driver rt3xxx-ohci rt3xxx-ohci: RT3xxx OHCI Controller rt3xxx-ohci rt3xxx-ohci: new USB bus registered, assigned bus number 2 rt3xxx-ohci rt3xxx-ohci: irq 18, io mem 0x101c1000 hub 2-0:1.0: USB hub found hub 2-0:1.0: 1 port detected usbcore: registered new interface driver cdc_acm cdc_acm: v0.26:USB Abstract Control Model driver for USB modems and ISDN adapters Initializing USB Mass Storage driver... usbcore: registered new interface driver usb-storage USB Mass Storage support registered. MTK MSDC device init. msdc0 -\u0026gt; ops_get_cd return\u0026lt;0\u0026gt; \u0026lt;- msdc_ops_get_cd() : L\u0026lt;2317\u0026gt; PID\u0026lt;kworker/u:1\u0026gt;\u0026lt;0x1a\u0026gt; mtk-sd: MediaTek MT6575 MSDC Driver GACT probability on Mirror/redirect action on Simple TC action Loaded netem: version 1.2 u32 classifier Performance counters on input device check on Actions configured Netfilter messages via NETLINK v0.30. nf_conntrack version 0.5.0 (846 buckets, 3384 max) ctnetlink v0.93: registering with nfnetlink. nf_conntrack_rtsp v0.6.21 loading matchsize=264 xt_time: kernel timezone is -0000 IPVS: Registered protocols () IPVS: Connection hash table configured (size=4096, memory=32Kbytes) IPVS: ipvs loaded. GRE over IPv4 demultiplexor driver gre: can\u0026#39;t add protocol nf_nat_rtsp v0.6.21 loading ip_tables: (C) 2000-2006 Netfilter Core Team, Type=Restricted Cone arp_tables: (C) 2002 David S. Miller TCP cubic registered NET: Registered protocol family 10 NET: Registered protocol family 17 Bridge firewalling registered L2TP core driver, V2.0 PPPoL2TP kernel driver, V2.0 802.1Q VLAN Support v1.8 Ben Greear \u0026lt;greearb@candelatech.com\u0026gt; All bugs added by David S. Miller \u0026lt;davem@redhat.com\u0026gt; Warning: unable to open an initial console. Freeing unused kernel memory: 4288k freed Algorithmics/MIPS FPU Emulator v1.5 Welcome to __ ___ _____ _____ _ _______ ______ _____ _ ___ | \\ / || ___|| __ \\ | || __ ||__ __|| ___|| | / / | ^ || |__ | | \\ \\| || | | | | | | |__ | |/ / | | | || ___|| | | || || |__| | | | | ___|| \\ | | | || |___ | |__/ /| || __ | | | | |___ | |\\ \\ |__| |___||_____||_____/ |_||_| |_| |_| |_____||_| \\__\\ = Everyday Genius = GobiNet: 2011-07-29-1026 usbcore: registered new interface driver GobiNet [CC] [12] init daemon... cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory Password for \u0026#39;admin\u0026#39; changed ##### disable 1st wireless interface ##### ##### disable 2nd wireless interface ##### rmmod: rlt_wifi: No such file or directory insmod: rlt_wifi.ko: module not found cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory RX[0] DESC a21ec000 size = 4096 RX[1] DESC a21ed000 size = 4096 E2pAccessMode=0 cfg_mode=9 cfg_mode=9 wmode_band_equal(): Band Equal! 1. Phy Mode = 14 Country Region from e2p = ffff 2. Phy Mode = 14 3. Phy Mode = 14 AntCfgInit: primary/secondary ant 0/1 Current Temperature from BBP_R49=0xfffffff8 RT6352_TssiTableAdjust: upper_bound = 0x7F decimal: 127 RT6352_TssiTableAdjust: lower_bound = 0xFFFFFF80 decimal: -128 *** RT6352_TssiTableAdjust: G Tssi[-7 .. +7] = -128 -1 -1 -1 -128 -1 -1 - -1 - -1 -1 -1 -1 -1 -1 -1, offset=-9, tuning=0 RT6352_TssiTableAdjust: G Tssi[-7 .. +7] = -128 -10 -10 -10 -128 -10 -10 - -10 - -10 -10 -10 -10 -10 -10 -10, offset=-9, tuning=0 mp_temperature=0x00, step = +7 E2PROM: G Tssi[-7 .. +7] = -128 -10 -10 -10 -128 -10 -10 - -10 - -10 -10 -10 -10 -10 -10 -10, offset=-9, tuning=0 ChipStructAssign(): RALINK6352 hook ! bAutoTxAgcG = 0 MCS Set = ff ff 00 00 01 APStartUp(): AP Set CentralFreq at 7(Prim=9, HT-CentCh=7, VHT-CentCh=0, BBP_BW=1) Main bssid = e8:d1:1b:07:5a:7b \u0026lt;==== rt28xx_init, Status=0 get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=wds get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=wds get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=wds get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=wds get_dev_name_prefix(): dev_idx = 0, dev_name_prefix=apcli RTMPDrvOpen(1):Check if PDMA is idle! RTMPDrvOpen(2):Check if PDMA is idle! build time = 20141115060606a rom patch for E3 IC platform = ALPS hw/sw version = �� patch version = FW Version:0.0.00 Build:1 Build Time:201507311614____ fw for E3 IC RX[0] DESC a278b000 size = 4096 RX[1] DESC a278c000 size = 4096 E2pAccessMode=0 cfg_mode=14 cfg_mode=14 wmode_band_equal(): Band Not Equal! 1. Phy Mode = 49 drivers/net/wireless/rlt_wifi_ap/../rlt_wifi_p1/chips/mt76x2.c:2844 assert (ad-\u0026gt;TxPower[choffset].Channel == 42)failed Country Region from e2p = ffff 2. Phy Mode = 49 3. Phy Mode = 49 andes_pci_fw_init 0x1300 = 00073200 AntCfgInit: primary/secondary ant 0/1 andes_load_cr:cr_type(2) ChipStructAssign(): MT76x2 hook ! bAutoTxAgcG = 0 MCS Set = ff ff 00 00 01 mt76x2_bbp_adjust():rf_bw=2, ext_ch=1, PrimCh=157, HT-CentCh=159, VHT-CentCh=155 TX0 power compensation = 0x38 TX1 power compensation = 0x38 APStartUp(): AP Set CentralFreq at 155(Prim=157, HT-CentCh=159, VHT-CentCh=155, BBP_BW=2) mt76x2_calibration(channel = 155) Main bssid = e8:d1:1b:07:5a:7c mt76x2_reinit_agc_gain:original agc_vga0 = 0x5c, agc_vga1 = 0x5c mt76x2_reinit_agc_gain:updated agc_vga0 = 0x5c, agc_vga1 = 0x5c mt76x2_reinit_hi_lna_gain:original hi_lna0 = 0x27, hi_lna1 = 0x27 mt76x2_reinit_hi_lna_gain:updated hi_lna0 = 0x27, hi_lna1 = 0x27 original vga value(chain0) = 5c original vga value(chain1) = 5c \u0026lt;==== rt28xx_init, Status=0 get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=wdsi get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=wdsi get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=wdsi get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=wdsi get_dev_name_prefix(): dev_idx = 1, dev_name_prefix=apclii RTMPDrvOpen(1):Check if PDMA is idle! RTMPDrvOpen(2):Check if PDMA is idle! ifconfig: ioctl 0x8913 failed: No such device brctl: bridge br0: No such device or address ##### configVIF ##### Raeth v3.1 (Tasklet) phy_tx_ring = 0x014d2000, tx_ring = 0xa14d2000 phy_rx_ring0 = 0x014d3000, rx_ring0 = 0xa14d3000 SMACCR1 -- : 0x0000e8d1 SMACCR0 -- : 0x1b075a79 CDMA_CSG_CFG = 81000000 GDMA1_FWD_CFG = 20710000 vconfig: ioctl error for rem: No such device vconfig: ioctl error for rem: No such device rmmod: 8021q: No such file or directory device eth2 entered promiscuous mode ##### config Ralink ESW vlan partition (LLLLW) ##### usb 1-1: new high speed USB device using rt3xxx-ehci and address 2 switch reg write offset=2004, value=ff0003 switch reg write offset=2104, value=ff0003 switch reg write offset=2204, value=ff0003 switch reg write offset=2304, value=ff0003 switch reg write offset=2404, value=ff0003 switch reg write offset=2504, value=ff0003 switch reg write offset=2010, value=810000c0 switch reg write offset=2110, value=810000c0 switch reg write offset=2210, value=810000c0 switch reg write offset=2310, value=810000c0 switch reg write offset=2410, value=810000c0 switch reg write offset=2510, value=810000c0 switch reg write offset=2610, value=81000000 switch reg write offset=2710, value=81000000 switch reg write offset=2604, value=20ff0003 switch reg write offset=2704, value=20ff0003 Special Tag Disabled switch reg write offset=2610, value=81000000 switch reg write offset=2014, value=10001 switch reg write offset=2114, value=10001 switch reg write offset=2214, valucdc_acm 1-1:1.2: This device cannot do calls on its own. It is not a modem. e=10001 switch reg write offset=2314, value=10001 switch reg write offset=2414cdc_acm 1-1:1.2: ttyACM0: USB ACM device , value=10002 switch reg write offset=2514, value=10001 REG_ESW_WT_MAC_ATC is 0x7ff0002 done. cdc_acm 1-1:1.4: This device cannot do calls on its own. It is not a modem. cdc_acm 1-1:1.4: ttyACM1: USB ACM device GobiNet 1-1:1.6: usb0: register \u0026#39;GobiNet\u0026#39; at usb-rt3xxx-1, GobiNet Ethernet Device, e2:d4:81:3d:2f:ff device ra0 entered promiscuous mode device eth2.1 entered promiscuous mode device rai0 entered promiscuous mode ##### enable 2nd wireless interface ##### cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory lted.sh (at+cmd) run ... cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory data=[ up lted.sh set_lte_led] del_reg():/var/run/.ip_up.reg, lted.sh set_lte_led br0: port 3(rai0) entering listening state br0: port 3(rai0) entering listening state br0: port 2(eth2.1) entering listening state br0: port 2(eth2.1) entering listening state br0: port 1(ra0) entering listening state br0: port 1(ra0) entering listening state add_reg():/var/run/.ip_up.reg, lted.sh set_lte_led ifconfig: ioctl 0x8914 failed: Cannot assign requested address ifconfig: ioctl 0x8914 failed: Cannot assign requested address cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory route: ioctl 0x890c failed: No such process killall: rt2860apd: no process killed route: ioctl 0x890c failed: No such process killall: rtinicapd: no process killed killall: wapid: no process killed iptables v1.4.10: Couldn\u0026#39;t load target `firewall\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. Mason : *pbLinkState = false (17:30:24) Type 0x10 : result=65494 callendreason[0]=36 callendreason[1]=101 Type 0x11 : result=65494 callendreasontype[0]=0 callendreasontype[1]=0 callendreasontype[2]=0 callendreasontype[3]=0 iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `firewall_input\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. creating qcqmi0 ++ /sbin/automount_lte.sh: qcqmi0, qcqmi0, add, ===================== usb device: usbdev1.2 path: vendor: 05c6 product: 9026 manufacturer: Askey LTE module iptables v1.4.10: Couldn\u0026#39;t load target `mac_filter\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `ipport_filter\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `web_filter\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `malicious_filter\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `malicious_input_filter\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `port_trigger\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `trigger_prerouting\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory firewall.c:iptablesIPPortFilterRun:529:Warning: can\u0026#39;t find \u0026#34;IPPortFilterRules\u0026#34; in flash. firewall.c:iptablesMACFilterRun:449:Warning: can\u0026#39;t find \u0026#34;MacFilteringRules\u0026#34; in flash. cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory sh: /bin/super_dmz: not found iptables v1.4.10: Couldn\u0026#39;t load target `port_forward\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `port_forward\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `MINIUPNPD\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables v1.4.10: Couldn\u0026#39;t load target `DMZ\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. iptables v1.4.10: Couldn\u0026#39;t load target `vpn_passthrough\u0026#39;:File not found Try `iptables -h\u0026#39; or \u0026#39;iptables --help\u0026#39; for more information. iptables: No chain/target/match by that name. 30 0 180 0 HTTP/1.0 302 Redirect Pragma: no-cache Cache-Control: no-cache Content-Type: text/html Location: (null) my.pool.ntp.org: Unknown host syslogd: illegal option -- C BusyBox v1.12.1 (2017-10-16 17:28:06 CST) multi-call binary Usage: syslogd [OPTION]... cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory get_ipaddr: ioctl SIOCGIFADDR error for usb0 internet.c:ripd_restart:435:The WAN IP is still undeterminated... cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory 0 HTTP/1.0 302 Redirect Pragma: no-cache Cache-Control: no-cache Content-Type: text/html Location: (null) cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory Power LED On 33 data=[ up start_voip.sh] [auto fota] Start session connection after 4267 seconds del_reg():/var/run/.port_up.reg, start_voip.sh cat: can\u0026#39;t open \u0026#39;/var/run/LteManager.status\u0026#39;: No such file or directory init: can\u0026#39;t log to /dev/tty5 starting pid 4531, tty \u0026#39;/dev/ttyS1\u0026#39;: \u0026#39;/sbin/getty 57600 ttyS1\u0026#39; no osal_kernel: module license \u0026#39;D2 Technologies, Inc. Proprietary Software\u0026#39; taints kernel. Disabling lock debugging due to kernel taint [KEYMGR] Starting... osal_module.c:39 OSAL module_init OK lkm.c 178: devname /dev/d2vtspr /dev/d2vtspr registered successfuly @ 249. ralink login: ======== vPort Release +D2Tech+ VPORT WANG2_R_1_6_11 ======== D2 Technologies _ _ __ / | \u0026#39;/ /_ _ /_ _ _ /_ _ ._ _ /_.\u0026#39;/_ //_\u0026#39;/_ / // //_///_//_///_\u0026#39;_\\ _/ Unified Communication Products www.d2tech.com [keymgr] Bolt new board rev 5(RED RSSI LED) vapp_init.c:621 - hostname_ptr=192.168.1.123 vapp_init.c:661 VAPP hostname 192.168.1.123 (\u0026#39;192.168.1.123\u0026#39;) vapp_init.c:663 VAPP hostname 192.168.1.123 (hbo c0a8017b) _VAPP_initSetupSystem 767 - flashTmo = 5 _VAPP_initSetupSystem 1008 - MGMT port = 10000 Set reg status: Unregistered vapp_init: uname00= not set infc=0 appr=0 vapp_init: - forcing default uname00=000000001681920 vapp_init.c 1503: dname00 not set, defaulting to uname \u0026#39;000000001681920\u0026#39; vapp_init.c 1622 - dtmfType = 2, coderEnable[VAPP_CODER_DTMF] = 1 vapp_init.c: 1719 UA 0 is configured with these params: Hostname: 192.168.1.123 (hbo c0a8017b) HostAddr: 192.168.1.123 Authname: ******** Password: ******** Domain: ims.indosat.com Realm: ims.indosat.com Registrar: 202.62.29.166 Proxy : 202.62.29.166 Username[0]: ******** Dname[0]: ******** Channel 0: Revision Id 0xA2(0x18:0x2) Si3217x: Channel 0 : Type = PROSLIC si3217x : Channel 0 : Type = 24 si3217x : Channel 0 : Rev = 2 Si3217x: loading patch: 06182014 Si3217x: Channel 0 : VBAT Up = 58.375 v br0: port 3(rai0) entering learning state br0: port 2(eth2.1) entering learning state br0: port 1(ra0) entering learning state Si3217x: PCMStart vapp_vtsp.c: VTSP_getVersion reports v1.4.0 IOCTL_QMI_GET_SERVICE_FILE : arg=1 =============== result=1b01 =============== IOCTL_QMI_GET_SERVICE_FILE : arg=2 =============== result=202 =============== IOCTL_QMI_GET_SERVICE_FILE : arg=3 =============== result=303 =============== D2 Technologies, Inc. _ _ __ / | \u0026#39;/ /_ _ /_ _ _ /_ _ ._ _ /_.\u0026#39;/_ //_\u0026#39;/_ / // //_///_//_///_\u0026#39;_\\ _/ Unified Communication Products www.d2tech.com +D2Tech+ VTSP_RT WANG2_R_1_6_11 +D2Tech+ VTSP_RT WANG2_R_1_6_11 +D2Tech+ +D2Tech+ +D2Tech+ comm trunk-comm src-svn: 4647 d2tools-svn: 4647 +D2Tech+ +D2Tech+ +D2Tech+ +D2Tech+ +D2Tech+ +D2Tech+ +D2Tech+ tone M24KEC4_B_1_1-tone_1_2 src-svn: 225 d2tools-svn: 3454 +D2Tech+ +D2Tech+ +D2Tech+ +D2Tech+ _VHW_start 874 Start the TASKLET mode [LTE] -\u0026gt; LTE module found. Set call status: Idle [LTE] -\u0026gt; No SIM card. br0: topology change detected, propagating br0: port 3(rai0) entering forwarding state br0: topology change detected, propagating br0: port 2(eth2.1) entering forwarding state br0: topology change detected, propagating br0: port 1(ra0) entering forwarding state VTSPR_task 141 RealTime miss found in VTSPR tasklet mode ","permalink":"https://radito.github.io/posts/d52505f2-fd5b-4dd1-8286-fdc37c700cfb/","summary":"💡 Apa itu Router ?\nRouter adalah perangkat jaringan yang meneruskan paket data antara jaringan komputer. Router terhubung dengan setidaknya dua jaringan, biasanya dua LAN (Local Area Network) atau WAN (Wide Area Network) atau LAN dan jaringan ISP (Internet Service Provider) nya. Router terletak di gerbang, tempat di mana dua atau lebih jaringan terhubung.\n✳️ ToDo List Oprek\nAkses Port UART/Serial Rooting Firmware Bawaan Dump Firmware Bawaan Install Mod USB Port Install Firmware OpenWRT Menggunakan Command Line Menggunakan Web Interface (Cara Mudah) Konfigurasi modem LTE di OpenWRT ✳️ Router Bolt dengan Modem LTE","title":"⚙️ Ngoprek Bolt BL-100"},{"content":" OpenWRT is a Linux-based open-source operating system designed for embedded devices such as routers. It is a free and customizable firmware that allows users to modify and extend the functionality of their routers beyond what the manufacturer provides. OpenWRT is popular among tech enthusiasts, developers, and network administrators due to its flexibility, stability, and security features.\nFeatures OpenWRT comes with a range of features that make it a popular choice for embedded devices. Some notable features include:\nPackage Management: OpenWRT has a built-in package management system that allows users to install, update, and remove software packages easily. This feature makes it easy for users to customize their routers according to their needs. Security: OpenWRT comes with several security features, including a built-in firewall, VPN support, and support for encryption protocols. These features help to secure your network and protect your data from unauthorized access. Customization: OpenWRT is highly customizable, allowing users to configure their routers to their specific needs. Users can modify the source code, install custom software packages, and even create their own firmware images. Stability: OpenWRT is known for its stability and reliability. It is designed to run for long periods without crashing, which makes it ideal for critical applications. Benefits OpenWRT has several benefits, including:\nFlexibility: With OpenWRT, users have complete control over their routers. They can customize their routers to their specific needs and even add new features. Security: OpenWRT comes with several security features that help to protect your network and data from cyber threats. Stability: OpenWRT is designed to run for long periods without crashing, which makes it ideal for critical applications. Community Support: OpenWRT has a large and active community of developers and users who provide support, share knowledge, and contribute to the development of the firmware. Conclusion OpenWRT is a powerful and flexible firmware that offers users complete control over their routers. With its built-in package management system, security features, and customization options, OpenWRT is a popular choice for tech enthusiasts, developers, and network administrators. Its stability and reliability make it ideal for critical applications, while its active community provides support and contributes to its development.\n","permalink":"https://radito.github.io/posts/423def8e-4caf-4d57-a782-2d9fc3d670ed/","summary":"OpenWRT is a Linux-based open-source operating system designed for embedded devices such as routers. It is a free and customizable firmware that allows users to modify and extend the functionality of their routers beyond what the manufacturer provides. OpenWRT is popular among tech enthusiasts, developers, and network administrators due to its flexibility, stability, and security features.\nFeatures OpenWRT comes with a range of features that make it a popular choice for embedded devices.","title":"🛜 OpenWRT"}]